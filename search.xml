<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[幸福感分析]]></title>
    <url>%2F%E5%B9%B8%E7%A6%8F%E6%84%9F%E5%88%86%E6%9E%90.html</url>
    <content type="text"><![CDATA[本文是基于天池数据大赛新人赛项目“快来挖掘幸福感”的数据分析赛题链接 https://tianchi.aliyun.com/competition/entrance/231702/introduction 本文将按照以下步骤进行数据分析： 1.提出问题 2.数据读取 3.特征工程 4.可视化分析 5.建立模型 6.分析结果 一、提出问题 幸福感是指人类基于自身的满足感与安全感而主观产生的一系列欣喜与愉悦的情绪。 现代化给人类带来的一个重要成就无疑是物质生活条件的不断改善和生活质量的日益提高。然而，现代化又是一个充满悖论的进程，与客观福祉的提高形成比照的是主观幸福并没有呈现相应程度的上升，这无疑构成了现代化的一种困境。 本次分析将一窥幸福感的要义，进而去提升人民幸福感。 数据来源于中国综合社会调查(CGSS)2015年度调查问卷(居民问卷)具体指标如下： 现提出主要问题如下： 1.调查人群数据中的幸福状况如何 2.什么因素会影响一个人的幸福感？ 3.如何预测人民的幸福指数 针对问题一：利用matplotlib、seaborn库对数据集进行可视化描述性统计； 针对问题二：采用lightgbm算法进行回归分析，按特征重要性大小顺序排序； 针对问题三：利用训练得到的模型，对测试集进行预测分析。 二、数据读取 分析工具为：spyder 导入分析所需的包 1234567891011121314import syssys.pathsys.path.append("E:\\shuju")import pandas as pdimport numpy as np#numpy输出结果没有省略号np.set_printoptions(threshold=np.nan)from datetime import dateimport matplotlib.pyplot as pltimport seaborn as snsimport osimport xgboost as xgbfrom sklearn.metrics import mean_squared_errorfrom sklearn.model_selection import KFold, RepeatedKFold 读取数据集 12345# 引入数据os.chdir(r"E:/shuju/happiness")submit = pd.read_csv('happiness_submit.csv')test = pd.read_csv('happiness_test_complete.csv',encoding='gbk')train = pd.read_csv('happiness_train_complete.csv',encoding='gbk') 可见数据的规模如下 submit为需要提交给官方的数据集，其中happiness为模型预测的结果test,train分别为测试集和训练集，train中多出的一列为happiness 查看数据分布特征 1train.describe() 查看数据类型 12for col in train.columns: print(col,train[col].dtypes) 检查缺失值 123456789101112def get_missing(df): is_miss = df.isnull().sum().any() if is_miss: total_miss = df.isnull().sum() percent = total_miss/len(df) rst= pd.concat([total_miss,percent],axis=1,keys=['total','percent']) rst['dtype']=[str(df[col].dtypes)for col in df.columns] print(rst[rst['total']!=0]) else: print("no miss")get_missing(train) 三、特征工程将train和test同时处理 1data = pd.concat([train,test],axis=0,ignore_index=True) （一）缺失值处理1.去掉缺失值过多的两个特征 12data=data.drop(["edu_other"], axis=1)data=data.drop(["property_other"], axis=1) 2.对二分类缺失值进行处理 12data["join_party"]=data["join_party"].map(lambda x:0 if pd.isnull(x) else 1)data["invest_other"]=data["invest_other"].map(lambda x:0 if pd.isnull(x) else 1) 3.用众数对多分类缺失值进行填补 1234567891011121314data["edu_status"]=data["edu_status"].fillna(data["edu_status"].mode()[0])data["hukou_loc"]=data["hukou_loc"].fillna(data["hukou_loc"].mode()[0])data["social_neighbor"]=data["social_neighbor"].fillna(data["social_neighbor"].mode()[0])data["social_friend"]=data["social_friend"].fillna(data["social_friend"].mode()[0])data["work_status"]=data["work_status"].fillna(data["work_status"].mode()[0])data["work_type"]=data["work_type"].fillna(data["work_type"].mode()[0])data["work_manage"]=data["work_manage"].fillna(data["work_manage"].mode()[0])data["minor_child"]=data["minor_child"].fillna(data["minor_child"].mode()[0])data["s_edu"]=data["s_edu"].fillna(data["s_edu"].mode()[0])data["s_political"]=data["s_political"].fillna(data["s_political"].mode()[0])data["s_hukou"]=data["s_hukou"].fillna(data["s_hukou"].mode()[0])data["s_work_exper"]=data["s_work_exper"].fillna(data["s_work_exper"].mode()[0])data["s_work_status"]=data["s_work_status"].fillna(data["s_work_status"].mode()[0])data.loc[data['s_work_status']&lt;=0,'s_work_status'] = data["s_work_status"].mode()[0] 4.用均值对连续变量进行填补 123data["work_yr"]=data["work_yr"].fillna(data["work_status"].mean())data["family_income"]=data["family_income"].fillna(data["family_income"].mean())data.loc[data['family_income']&lt;=0,'family_income'] = data["family_income"].mean() （二）异常值处理 1234567891011121314#将-8换成3（说不上幸福不幸福）data["happiness"] = data["happiness"].map(lambda x:3 if x&lt;0 else x)data['hukou_loc'] = data['hukou_loc'].fillna(4)#获得最高学历的年份data["edu_yr"]=data["edu_yr"].fillna(-2)data["marital_1st"]=data["marital_1st"].fillna(0)data.loc[data['marital_1st']&lt;=0,'marital_1st'] = 0data["s_birth"]=data["s_birth"].fillna(data["birth"])#请问您与目前的配偶是哪一年结婚的data["marital_now"]=data["marital_now"].fillna(0)data.loc[data['marital_now']&lt;=0,'marital_now'] = 0data["s_income"]=data["s_income"].fillna(0)data.loc[data['s_income']&lt;=0,'s_income'] = 0data["s_work_type"]=data["s_work_type"].fillna(0) （三）构建新特征根据传统社会学观点，人的幸福感受到六大因素的影响。分别为家庭关系、收入、社会支持关系、身体健康、社会地位、自尊水平本文将依此来建立新的特征 1.家庭关系相关特征 12345678910#第一次结婚年龄data['marital_1stbir'] = data['marital_1st'] - data['birth']#最近结婚年龄data['marital_nowtbir'] = data['marital_now'] - data['birth'] #是否再婚data['mar'] = data['marital_nowtbir'] - data['marital_1stbir']#配偶年龄data['marital_sbir'] = data['marital_now']-data['s_birth']#配偶年龄差data['age_'] = data['marital_nowtbir'] - data['marital_sbir'] 2.收入相关特征 123456789101112#收入比data['income/s_income'] = data['income']/(data['s_income']+1)data['income+s_income'] = data['income']+(data['s_income']+1)data['income/family_income'] = data['income']/(data['family_income']+1)data['all_income/family_income'] = (data['income']+data['s_income'])/(data['family_income']+1)data['income/inc_exp'] = data['income']/(data['inc_exp']+1)data['family_income/m'] = data['family_income']/(data['family_m']+0.01)#收入/面积比data['income/floor_area'] = data['income']/(data['floor_area']+0.01)data['all_income/floor_area'] = (data['income']+data['s_income'])/(data['floor_area']+0.01)data['family_income/floor_area'] = data['family_income']/(data['floor_area']+0.01)data['income/m'] = data['floor_area']/(data['family_m']+0.01) 3.社会支持关系相关特征 1 4.社会地位相关特征 123456789101112131415161718192021222324252627282930313233#province meandata['province_income_mean'] = data.groupby(['province'])['income'].transform('mean').valuesdata['province_family_income_mean'] = data.groupby(['province'])['family_income'].transform('mean').valuesdata['province_equity_mean'] = data.groupby(['province'])['equity'].transform('mean').valuesdata['province_depression_mean'] = data.groupby(['province'])['depression'].transform('mean').valuesdata['province_floor_area_mean'] = data.groupby(['province'])['floor_area'].transform('mean').values#city meandata['city_income_mean'] = data.groupby(['city'])['income'].transform('mean').valuesdata['city_family_income_mean'] = data.groupby(['city'])['family_income'].transform('mean').valuesdata['city_equity_mean'] = data.groupby(['city'])['equity'].transform('mean').valuesdata['city_depression_mean'] = data.groupby(['city'])['depression'].transform('mean').valuesdata['city_floor_area_mean'] = data.groupby(['city'])['floor_area'].transform('mean').values#county meandata['county_income_mean'] = data.groupby(['county'])['income'].transform('mean').valuesdata['county_family_income_mean'] = data.groupby(['county'])['family_income'].transform('mean').valuesdata['county_equity_mean'] = data.groupby(['county'])['equity'].transform('mean').valuesdata['county_depression_mean'] = data.groupby(['county'])['depression'].transform('mean').valuesdata['county_floor_area_mean'] = data.groupby(['county'])['floor_area'].transform('mean').values#ratio 相比同个城市data['income/county'] = data['income']/(data['county_income_mean']+1) data['family_income/county'] = data['family_income']/(data['county_family_income_mean']+1) data['equity/county'] = data['equity']/(data['county_equity_mean']+1) data['depression/county'] = data['depression']/(data['county_depression_mean']+1) data['floor_area/county'] = data['floor_area']/(data['county_floor_area_mean']+1) #class meandata['city_class_income_mean'] = data.groupby(['class'])['income'].transform('mean').valuesdata['city_class_family_income_mean'] = data.groupby(['class'])['family_income'].transform('mean').valuesdata['city_class_equity_mean'] = data.groupby(['class'])['equity'].transform('mean').valuesdata['city_class_depression_mean'] = data.groupby(['class'])['depression'].transform('mean').valuesdata['city_class_floor_area_mean'] = data.groupby(['class'])['floor_area'].transform('mean').values 5.自尊水平 1234#classdata['class_10_diff'] = (data['class_10_after'] - data['class_10_before'])data['class_diff'] = data['class'] - data['class_10_before']data['class_14_diff'] = data['class'] - data['class_14'] 6.其他 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273def getres1(row): return len([x for x in row.values if type(x)==int and x&lt;0])def getres2(row): return len([x for x in row.values if type(x)==int and x==-8])def getres3(row): return len([x for x in row.values if type(x)==int and x==-1])def getres4(row): return len([x for x in row.values if type(x)==int and x==-2])def getres5(row): return len([x for x in row.values if type(x)==int and x==-3])#调查问卷有效程度data['neg1'] = data[data.columns].apply(lambda row:getres1(row),axis=1)data.loc[data['neg1']&gt;20,'neg1'] = 20 #平滑处理data['neg2'] = data[data.columns].apply(lambda row:getres2(row),axis=1)data['neg3'] = data[data.columns].apply(lambda row:getres3(row),axis=1)data['neg4'] = data[data.columns].apply(lambda row:getres4(row),axis=1)data['neg5'] = data[data.columns].apply(lambda row:getres5(row),axis=1)#对体重修正data.loc[(data['weight_jin']&lt;=80)&amp;(data['height_cm']&gt;=160),'weight_jin']= data['weight_jin']*2data.loc[data['weight_jin']&lt;=60,'weight_jin']= data['weight_jin']*2data.loc[data['family_income']&lt;=0,'family_income']=0data.loc[data['inc_exp']&lt;=0,'inc_exp']= 0#处理时间特征data['survey_time'] = pd.to_datetime(data['survey_time'],format='%Y-%m-%d %H:%M:%S')data["weekday"]=data["survey_time"].dt.weekdaydata["year"]=data["survey_time"].dt.yeardata["quarter"]=data["survey_time"].dt.quarterdata["hour"]=data["survey_time"].dt.hourdata["month"]=data["survey_time"].dt.month#把一天的时间分段def hour_cut(x): if 0&lt;=x&lt;6: return 0 elif 6&lt;=x&lt;8: return 1 elif 8&lt;=x&lt;12: return 2 elif 12&lt;=x&lt;14: return 3 elif 14&lt;=x&lt;18: return 4 elif 18&lt;=x&lt;21: return 5 elif 21&lt;=x&lt;24: return 6data["hour_cut"]=data["hour"].map(hour_cut)#做问卷时候的年龄data["survey_age"]=data["year"]-data["birth"]#出生的年代def birth_split(x): if 1920&lt;=x&lt;=1930: return 0 elif 1930&lt;x&lt;=1940: return 1 elif 1940&lt;x&lt;=1950: return 2 elif 1950&lt;x&lt;=1960: return 3 elif 1960&lt;x&lt;=1970: return 4 elif 1970&lt;x&lt;=1980: return 5 elif 1980&lt;x&lt;=1990: return 6 elif 1990&lt;x&lt;=2000: return 7data["birth_s"]=data["birth"].map(birth_split) （四）后处理 1234X_train_ = data[:train.shape[0]]X_test_ = data[train.shape[0]:]get_missing(X_train_)Y_train_= X_train_["happiness"] 四、可视化分析1.整体幸福感 12345678# 查看各个类别的分布情况，有很明显的类别不均衡的问题f,ax=plt.subplots(1,2,figsize=(10,5))Y_train_.value_counts().plot.pie(autopct='%1.1f%%',ax=ax[0],shadow=True)ax[0].set_title('happiness')ax[0].set_ylabel('')Y_train_.value_counts().plot.bar(ax=ax[1])ax[1].set_title('happiness')plt.savefig('hist_happiness.png') 注：happiness：1 = 非常不幸福; 2 = 比较不幸福; 3 = 说不上幸福不幸福; 4 = 比较幸福; 5 = 非常幸福; 由图可知，有少部分人群处于平均水平之下，没有明显的幸福感甚至是缺乏幸福感；77.6%的被访谈居民认为自己比较幸福，说明我国的居民幸福感整体还是比较高的；认为自己非常幸福的人只占到了17.6%。我国距离“人民幸福”的指标仍有提高空间。 2.按性别区分按性别的幸福指数比较，1表示男性，2表示女性 123456789101112# 探究性别和幸福感的分布sns.countplot('gender',hue='happiness',data=X_train_ )ax[1].set_title('Sex:happiness')plt.savefig('gender_happiness.png')plt.figure(figsize=(10, 5))plt.subplot(1, 2, 1)X_train_['happiness'][X_train_['gender'] == 1].value_counts().plot(kind='pie', autopct='%1.1f%%')plt.subplot(1, 2, 2)X_train_['happiness'][X_train_['gender'] == 2].value_counts().plot(kind='pie', autopct='%1.1f%%')plt.title('different happiness level percent by gender')plt.savefig('gender_pie.png') 不同性别下幸福指数数量图：不同性别下幸福指数比例图：从两性方面可以看出，居民幸福感与性别没有明显关系。但是女性选择“3，不知道自己幸不幸福”的比例少于男性，说明女性的对于自己的幸福感认知高于男性，更加关注自己的心理处境，而男性则较少思考自己是否幸福。 3.按城农区分样本类型的幸福指数比较，1表示城市，2表示农村 123456789101112#城市农村区分sns.countplot('survey_type',hue='happiness',data=X_train_ )ax[1].set_title('coutry_city:happiness')plt.savefig('coutry_city_happiness.png')plt.figure(figsize=(10, 5))plt.subplot(1, 2, 1)X_train_['happiness'][X_train_['survey_type'] == 1].value_counts().plot(kind='pie', autopct='%1.1f%%')plt.subplot(1, 2, 2)X_train_['happiness'][X_train_['survey_type'] == 2].value_counts().plot(kind='pie', autopct='%1.1f%%')plt.title('different happiness level percent in city or country')plt.savefig('country_or_city_pie.png') 城市农村幸福指数数量图：城市农村幸福指数比例图：由上图可知，城市居民相比于农村居民，明显有着更高的幸福感。但是居民对幸福感的认知占比大致相当，说明城市农村是一个弱相关因素，能起到一定的影响，但影响不大。 4.按年龄区分 123456789101112131415161718192021222324252627df=X_train_['survey_age']df.plot.hist(bins=8)plt.savefig('age.png')sns.countplot('age_s',hue='happiness',data=X_train_ )ax[1].set_title('age:happiness')plt.savefig('age_happiness.png')plt.figure(figsize=(10, 5))plt.subplot(2, 4, 1)X_train_['happiness'][X_train_['age_s'] == 0].value_counts().plot(kind='pie', autopct='%1.1f%%')plt.subplot(2, 4, 2)X_train_['happiness'][X_train_['age_s'] == 1].value_counts().plot(kind='pie', autopct='%1.1f%%')plt.subplot(2, 4, 3)X_train_['happiness'][X_train_['age_s'] == 2].value_counts().plot(kind='pie', autopct='%1.1f%%')plt.subplot(2, 4, 4)X_train_['happiness'][X_train_['age_s'] == 3].value_counts().plot(kind='pie', autopct='%1.1f%%')plt.subplot(2, 4, 5)X_train_['happiness'][X_train_['age_s'] == 4].value_counts().plot(kind='pie', autopct='%1.1f%%')plt.subplot(2, 4, 6)X_train_['happiness'][X_train_['age_s'] == 5].value_counts().plot(kind='pie', autopct='%1.1f%%')plt.subplot(2, 4, 7)X_train_['happiness'][X_train_['age_s'] == 6].value_counts().plot(kind='pie', autopct='%1.1f%%')plt.subplot(2, 4, 8)X_train_['happiness'][X_train_['age_s'] == 7].value_counts().plot(kind='pie', autopct='%1.1f%%')plt.title('different happiness level percent by age')plt.savefig('age_pie.png') 接受问卷调查的居民年龄分布不同年龄幸福指数数量图：不同年龄幸福指数比例图：由图可知，小于20岁的青少年和70岁以上的老年人都有更大的幸福感，这与常识一致。青少年还未进入社会没有感受到社会生存的压力，处于一种天真烂漫的年纪，理应有更大的幸福感；而老年人在退休之后在家享受天伦之乐，没有多余的顾虑，所以幸福感增加也理所应当；中年人受到家庭压力、工作压力，经济负担等一些列因素的影响，感到更多的不幸福。]]></content>
      <tags>
        <tag>data analysis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[yaosheng]]></title>
    <url>%2Fyaosheng.html</url>
    <content type="text"><![CDATA[content 复道行空，不霁何虹。 长桥卧波，未云何龙。 #includeusing namespace std;int main(){ printf(“Hello World!”); return 0;} 人类的悲欢并不相通，我只觉得他们吵闹。——鲁迅 test_tile test_tile test_tile note defaultdefault $$\ce{CH2=CH2 + Cl2 -&gt; CH2Cl-CH2Cl}$$万有引力常数为$G$,对于质量分别为$M$和$m$，球心距离为$r$的两个正球形天体，两者间相互作用力：$$F=\frac{GMm}{r^2}$$]]></content>
      <categories>
        <category>data</category>
      </categories>
      <tags>
        <tag>data analysis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
